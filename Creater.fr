module net.tommay.spudoku.Creater where

import net.tommay.spudoku.Puzzle ()
import net.tommay.spudoku.Puzzle (Puzzle)
import net.tommay.spudoku.Solution (Solution)
import net.tommay.spudoku.Solver ()
import net.tommay.spudoku.Util ()

import System.Random as Random ()

create :: Random.StdGen -> [[Int]] -> Puzzle
create rnd layout =
  let (rnd1, rnd2) = Random.split rnd
      puzzle = randomSolvedPuzzle rnd1
      layout' = Util.shuffle rnd2 layout
  in create' puzzle layout'

private create' :: Puzzle -> [[Int]] -> Puzzle
private create' puzzle cellNumberLists =
  foldr
    (\ list accum ->
      -- We know accum has only one solution.
      -- Remove more stuff and check if that's still true.
      let newPuzzle = Puzzle.remove accum list
      in case Solver.allSolutions newPuzzle of
        [_] ->
          -- newPuzzle has only one solution, go with it.
          newPuzzle
        _ ->
          -- Ooops, removed too much, stick with the original.
          accum
    )
    puzzle
    cellNumberLists

createList :: Random.StdGen -> [[Int]] -> [Puzzle]
createList rnd layout =
  let (rnd1, rnd2) = Random.split rnd
      puzzle = create rnd1 layout
  in puzzle : (createList rnd2 layout)

private randomSolvedPuzzle :: Random.StdGen -> Puzzle
private randomSolvedPuzzle rnd =
  let emptyPuzzle = Puzzle.empty
      randomSolution = head $ Solver.allRandomSolutions rnd emptyPuzzle
      randomPuzzle = Solution.puzzle randomSolution
  in randomPuzzle
