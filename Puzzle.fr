module net.tommay.spudoku.Puzzle where

import net.tommay.spudoku.Digit (Digit)
import net.tommay.spudoku.Placed ()
import net.tommay.spudoku.Placed (Placed)
import net.tommay.spudoku.Util ()

import Data.Char as Char ()
import Data.List as List ()

abstract data Puzzle = Puzzle {
  placed :: [Placed]
}

-- Returns a new Puzzle with nothing placed.
--
empty :: Puzzle
empty =
  Puzzle.Puzzle {
    placed = []
  }

place :: Puzzle -> Int -> Digit -> Puzzle
place this cellNumber digit =
  this.{
    placed = Placed.new cellNumber digit : this.placed
  }

remove :: Puzzle -> [Int] -> Puzzle
remove this cellNumbers =
  let remaining = filter (not . (`elem` cellNumbers) . Placed.cellNumber)
        this.placed
  in this.{ placed = remaining }

-- Returns the number of placed digits.
--
size :: Puzzle -> Int
size this =
  length $ Puzzle.placed this

-- Returns a new Puzzle with each Cell initialized according to
-- Setup, which is a string of 81 digits or dashes.
--
fromString :: String -> Puzzle
fromString setup =
  let digits = toDigits setup
      zipped = zip [0..80] digits
  in foldr (\ (cellNumber, digit) this ->
             case digit of
               Nothing -> this
               Just digit -> Puzzle.place this cellNumber digit
           )
       empty
       zipped

-- Given a Setup string, returns a list of Maybe Digit for
-- each cell.
--
private toDigits :: String -> [Maybe Digit]
private toDigits setup =
  [case char of
    '-' -> Nothing
    _ -> Just $ Char.digitToInt char
   | char <- setup]

-- The opposite of fromString.  Given a Puzzle, create a string of 81
-- digits or dashes.  Creates two lists of (cellNumber, Char), one for
-- placed cells and one for unplaced cells, then sorts them together and
-- extracts the Chars in order.
--
private toString:: Puzzle -> [Char]
private toString this =
  let p = map (\ x -> (Placed.cellNumber x, Char.intToDigit $ Placed.digit x))
            this.placed
      unknownNumbers = (List.\\) [0..80] $ map Placed.cellNumber this.placed
      u = zip unknownNumbers $ repeat '-'
  in map snd $ List.sort $ p ++ u

-- Returns a string that prints out as a grid of digits.
--
toPuzzleString :: Puzzle -> String
toPuzzleString this =
  unlines $
    map (\puzzles ->
          unlines $
            map (\row -> unwords $ map packed $ Util.slices 3 row) $
              Util.slices 9 puzzles) $
      Util.slices 27 $ Puzzle.toString this
