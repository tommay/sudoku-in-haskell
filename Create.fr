module net.tommay.spudoku.Create where

import Data.List as List ()
import System.Random as Random ()

import net.tommay.spudoku.Creater ()
import net.tommay.spudoku.Layout ()
import net.tommay.spudoku.Puzzle (Puzzle)
import net.tommay.spudoku.Solution (Solution)
import net.tommay.spudoku.Solver ()
import net.tommay.spudoku.SolverOptions ()

dothis = doTimes 100
--solver = Solver.solutions SolverOptions.noGuessing
solver = Solver.solutions SolverOptions.all

main args = do
  case args of
    [style] ->
      case Layout.getLayout style of
        Just layout -> dothis layout
        Nothing -> showLayouts
    _ -> showLayouts

showLayouts = do
  putStrLn $
    "Valid layouts:\n" ++ (List.intercalate " " Layout.getLayoutStrings)

doTimes n layout = do
  let rnd = Random.mkStdGen 0
  mapM_ putStrLn $ map Puzzle.toPuzzleString $ take n $
    Creater.createList rnd layout solver

doOne layout = do
  rnd <- Random.getStdGen
  putStr $ Puzzle.toPuzzleString $ Creater.create rnd layout solver

doList layout = do
  rnd <- Random.getStdGen
  mapM_ putStrLn $ map Puzzle.toPuzzleString $
    Creater.createList rnd layout solver
