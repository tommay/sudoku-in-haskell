module net.tommay.spudoku.Create where

import Data.List as List ()
import System.Random as Random ()

import net.tommay.spudoku.Creater ()
import net.tommay.spudoku.Layout ()
import net.tommay.spudoku.Puzzle ()
import net.tommay.spudoku.Puzzle (Puzzle)
import net.tommay.spudoku.Solver ()
import net.tommay.spudoku.Solution ()
import net.tommay.spudoku.Stats ()

dothis = doOneNoGuessing

main args = do
  case args of
    [style] ->
      case Layout.getLayout style of
        Just layout -> dothis layout
        Nothing -> showLayouts
    _ -> showLayouts

showLayouts = do
  putStrLn $
    "Valid layouts:\n" ++ (List.intercalate " " Layout.getLayoutStrings)

doOne layout = do
  rnd <- Random.getStdGen
  putStr $ Puzzle.toPuzzleString $ Creater.create rnd layout

doOneNoGuessing layout = do
  rnd <- Random.getStdGen
  putStr $ Puzzle.toPuzzleString $ head $ createListNoGuessing rnd layout

doListNoGuessing layout = do
  rnd <- Random.getStdGen
  mapM_ putStrLn $ map Puzzle.toPuzzleString $ createListNoGuessing rnd layout

createListNoGuessing :: Random.StdGen -> [[Int]] -> [Puzzle]
createListNoGuessing rnd layout =
  filter
    ((== 0) . Stats.guesses . Solution.stats . head . Solver.allSolutions)
    $ Creater.createList rnd layout
